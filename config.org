#+Title: Emacs Kickstarter
#+Author: HienHM
#+Description: A starting point for Gnu Emacs with good defaults and packages that most people may want to use.
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :toc:
- [[#introduction][Introduction]]
- [[#important-to-load-first][Important to load first]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#use-package][Use Package]]
  - [[#use-environment-vairables][Use environment vairables]]
  - [[#evil-mode][Evil Mode]]
  - [[#meow-mode][Meow Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#good-defaults][Good Defaults]]
  - [[#better-defaults][Better Defaults]]
  - [[#move-where-i-mean][Move Where I Mean]]
  - [[#amx][Amx]]
  - [[#personal-information][Personal Information]]
  - [[#avy][Avy]]
  - [[#whitespace][Whitespace]]
  - [[#string-inflection][String inflection]]
- [[#appearance][Appearance]]
  - [[#set-theme][Set Theme]]
  - [[#transparency][Transparency]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#nyan-mode][Nyan Mode]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#eglot][Eglot]]
  - [[#yasnippet][Yasnippet]]
  - [[#language-modes][Language modes]]
  - [[#terminal][Terminal]]
  - [[#deadgrep][Deadgrep]]
  - [[#ai][AI]]
  - [[#indentation-guides][Indentation guides]]
  - [[#dumbjump][Dumbjump]]
- [[#multi-file-example][Multi File Example]]
  - [[#adding-the-lisp-directory-to-load-path][Adding the lisp directory to load-path]]
  - [[#sourcing-the-files][Sourcing the files]]
  - [[#using-the-file][Using the file]]
- [[#other-packages][Other Packages]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#git][Git]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#diredfl][Diredfl]]
  - [[#orderless][Orderless]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
  - [[#consult][Consult]]
  - [[#embark-consult][Embark-consult]]
  - [[#swiper][Swiper]]
  - [[#diminish][Diminish]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#which-key][Which-Key]]
  - [[#ace-window][Ace Window]]
  - [[#drag-lines-and-region-around][Drag lines and region around]]
  - [[#wc-mode][Wc Mode]]
  - [[#rotate][Rotate]]
  - [[#pdf-tools][PDF Tools]]
  - [[#expand-region][Expand Region]]
  - [[#neotree][Neotree]]
  - [[#multiple-cursors][Multiple cursors]]
- [[#runtime-performance][Runtime Performance]]
- [[#org-mode][Org Mode]]
  - [[#table-of-contents][Table of Contents]]
  - [[#org-superstar][Org Superstar]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#mysql-to-org-mode][MySql to org mode]]
  - [[#org-babels][Org Babels]]
  - [[#org-exporter][Org Exporter]]
  - [[#org-drawing][Org Drawing]]
  - [[#latex-previews-with-org][LaTeX previews with Org]]
  - [[#image-handling-in-the-org-file][Image handling in the Org file]]
  - [[#org-publish][Org Publish]]
  - [[#org-presentation][Org Presentation]]
  - [[#org-preview-html][Org Preview HTML]]
  - [[#custom-functions][Custom functions]]
  - [[#inline-images][Inline Images]]
  - [[#restclient][Restclient]]
- [[#weather-tools][Weather Tools]]
- [[#music][Music]]

* Introduction
#+begin_src emacs-lisp
#+end_src

* Important to load first
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that start/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
    (defun start/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src

** Use Package
We use the default package manager package.el with use-package. Alternative package managers (straight.el, elpaca, etc.) are useful if you want to
install packages from git repositories, if you want a specific, not very popular package that is not available on elpa or melpa,
or you want UI (elpaca) and other things.

If you are interested in these other package managers, check out their git repositories or search for more package managers.
In my experience Package.el is not slow and gets the job done.

To update/upgrade packages, use the package-upgrade-all command.
Check out the use-package [[https://www.gnu.org/software/emacs/manual/use-package.html][documentation]] to see how to use it.
With Emacs 29 use-package is now built-in.
#+begin_src emacs-lisp
    (require 'use-package-ensure) ;; Load use-package-always-ensure
    (setq use-package-always-ensure t) ;; Always ensures that a package is installed
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal
#+end_src

** Use environment vairables
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package emacs-solo-exec-path-from-shell
  :ensure nil
  :defer t
  :init
  (defun emacs-solo/set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment the same as user Shell."
    (interactive)
    (let ((path-from-shell
           (replace-regexp-in-string
            "[ \t\n]*$" "" (shell-command-to-string
                            "$SHELL --login -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))
      (message ">>> emacs-solo: PATH loaded")))

  (add-hook 'after-init-hook #'emacs-solo/set-exec-path-from-shell-PATH))
#+end_src
** Evil Mode
An extensible vi/vim layer for Emacs. Because…let’s face it. The Vim keybindings are just plain better.
Notes:
- You can toggle evil mode with C-z.
- To paste without copy (yank) select the text and use P (shift-p).

If you don't want to use evil-mode don't forget to remove:
- Messages buffer fix in Good default section (:ghook)
- And also change general.el keybindings and setup (general-evil-setup, :states, etc.)
*Note* I don't use evil mode
#+begin_src emacs-lisp :tangle no
    (use-package evil
      :init ;; Execute code Before a package is loaded
      (evil-mode)
      :config ;; Execute code After a package is loaded
      (evil-set-initial-state 'eat-mode 'insert) ;; Set initial state in eat terminal to insert mode
      :custom ;; Customization of package custom variables
      (evil-want-keybinding nil)    ;; Disable evil bindings in other modes (It's not consistent and not good)
      (evil-want-C-u-scroll t)      ;; Set C-u to scroll up
      (evil-want-C-i-jump nil)      ;; Disables C-i jump
      (evil-undo-system 'undo-redo) ;; C-r to redo
      (org-return-follows-link t)   ;; Sets RETURN key in org-mode to follow links
      ;; Unmap keys in 'evil-maps. If not done, org-return-follows-link will not work
      :bind (:map evil-motion-state-map
                  ("SPC" . nil)
                  ("RET" . nil)
                  ("TAB" . nil)))
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dired ibuffer magit corfu vertico consult))
      (evil-collection-init))
#+end_src

** TODO Meow Mode
#+begin_src emacs-lisp :tangle no
  (use-package meow
    :hook (after-init . meow-global-mode)
    :demand t
    :config
    (setq meow-replace-state-name-list
          '((normal . "🟢")
            (motion . "🟡")
            (keypad . "🟣")
            (insert . "🟠")
            (beacon . "🔴")))

    (setq meow-leader-key "C-c") ;; Same with leader key of general
    (add-to-list 'meow-mode-state-list '(org-mode . insert))
    (add-to-list 'meow-mode-state-list '(eat-mode . insert))
    (add-to-list 'meow-mode-state-list '(vterm-mode . insert))
    (add-to-list 'meow-mode-state-list '(git-commit-mode . insert))

    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
#+end_src
** General Keybindings
A keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (SPC + . Find file).
To search and replace, use query-replace-regexp to replace one by one C-M-% (SPC to replace n to skip).

#+begin_src emacs-lisp
      (use-package general
        :init
        (general-auto-unbind-keys)
        :config
        ;; (general-evil-setup)
        ;; Set up 'C-c' as the leader key
        (general-create-definer start/leader-keys
          :prefix "C-c")           ;; Set leader key

        (start/leader-keys
          "." '(find-file :wk "Find file")
          "TAB" '(comment-line :wk "Comment lines")
          "p" '(projectile-command-map :wk "Projectile command map"))


        (start/leader-keys
          "a" '(:ignore t :wk "Avy")
          "a a" '(avy-goto-char-timer :wk "Go to char")
          "a i" '(avy-isearch :wk "Isearch")
          "a w" '(avy-goto-word-1 :wk "Go to word")
          "a l" '(avy-goto-line :wk "Go to line")
          "a o" '(avy-goto-org-headline :wk "Go to org headline"))

        (start/leader-keys
          "b" '(:ignore t :wk "Buffer Bookmarks")
          "b b" '(consult-buffer :wk "Switch buffer")
          "b k" '(kill-this-buffer :wk "Kill this buffer")
          "b i" '(ibuffer :wk "Ibuffer")
          "b n" '(next-buffer :wk "Next buffer")
          "b p" '(previous-buffer :wk "Previous buffer")
          "b r" '(revert-buffer :wk "Reload buffer")
          "b j" '(consult-bookmark :wk "Bookmark jump"))

        (start/leader-keys
          "c" '(:ignore t :wk "ChatGPT")
          "c c" '(gptel :wk "Start")
          "c s" '(gptel-send :wk "Send")
          "c m" '(gptel-menu :wk "Menu"))

        (start/leader-keys
          "d" '(:ignore t :wk "Dired")
          "d v" '(dired :wk "Open dired")
          "d j" '(dired-jump :wk "Dired jump to current"))

        (start/leader-keys
          "e" '(:ignore t :wk "Eglot Evaluate")
          "e e" '(eglot-reconnect :wk "Eglot Reconnect")
          "e f" '(eglot-format :wk "Eglot Format")
          "e l" '(consult-flymake :wk "Consult Flymake")
          "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
          "e r" '(eval-region :wk "Evaluate elisp in region"))

        (start/leader-keys
          "f" '(:ignore t :wk "Find")
          "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config")
          "f r" '(consult-recent-file :wk "Recent files")
          "f f" '(consult-fd :wk "Fd search for files")
          "f g" '(consult-ripgrep :wk "Ripgrep search in files")
          "f l" '(consult-line :wk "Find line")
          "f i" '(consult-imenu :wk "Imenu buffer locations"))

        (start/leader-keys
          "g" '(:ignore t :wk "Git")
          "g g" '(magit-status :wk "Magit status"))

        (start/leader-keys
          "j" '(:ignore t :wk "Dumb Jump")
          "j g" '(dumb-jump-go :wk "Dumb jump go")
          "j o" '(dumb-jump-go-other-window :wk "Dumb jump go other window")
          "j i" '(dumb-jump-go-prompt :wk "Dumb jump go prompt")
          "j x" '(dumb-jump-go-prefer-external :wk "Dumb jump go prefer external")
          "j b" '(dumb-jump-back :wk "Dumb jump back"))

        (start/leader-keys
          "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands (describe variable, function, etc.)
          "h q" '(save-buffers-kill-emacs :wk "Quit Emacs and Daemon")
          "h r" '((lambda () (interactive)
                    (load-file "~/emacs.d/init.el"))
                  :wk "Reload Emacs config"))

        (start/leader-keys
          "l" '(:ignore t :wk "Ellama")
          "l m" '(ellama-transient-main-menu :wk "Transient Main Menu"))

        (start/leader-keys
          "o" '(:ignore t :wk "Combobulate"))

        (start/leader-keys
          "s" '(:ignore t :wk "Show")
          "s e" '(eat :wk "Eat terminal"))

        (start/leader-keys
          "t" '(:ignore t :wk "Toggle")
          "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
          "t l" '(display-line-numbers-mode :wk "Toggle line numbers")))
#+end_src

** Good Defaults
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (menu-bar-mode nil)         ;; Disable the menu bar
    (scroll-bar-mode nil)       ;; Disable the scroll bar
    (tool-bar-mode nil)         ;; Disable the tool bar
    (inhibit-startup-screen t)  ;; Disable welcome screen

    (delete-selection-mode t)   ;; Select text and delete it by typing.
    (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
    (electric-pair-mode t)      ;; Turns on automatic parens pairing

    (blink-cursor-mode nil)     ;; Don't blink cursor
    (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

    ;;(dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
    (recentf-mode t) ;; Enable recent file mode

    (global-visual-line-mode t)           ;; Enable truncated lines
    ;; (display-line-numbers-type 'relative) ;; Relative line numbers
    (global-display-line-numbers-mode t)  ;; Display line numbers
    ;; Smooth scrolling
    (scroll-step 1)
    (scroll-conservatively 100000) ;; Maker distamce from center (don't jump to center)
    (scroll-preserve-screen-position 1) ;; Try to keep screen position when PgDn/PgUp
    (scroll-margin 0) ;; Start scrolling when marker and top/bottom
    (mouse-wheel-scroll-amount '(1)) ;; Mouse scroll moves 1 line at a time, instead of 5 lines.
    (mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling

    ;;(scroll-margin 8)

    (tab-width 4)

    (make-backup-files nil) ;; Stop creating ~ backup files
    (auto-save-default nil) ;; Stop creating # auto save files
    (visible-bell t) ;; Turn off audible bell
    :hook
    (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
    :config
    ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
    (setq custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file 'noerror 'nomessage)
    :bind (
           ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
           )
    ;; Fix general.el leader key not working instantly in messages buffer with evil mode
    ;; :ghook ('after-init-hook
    ;;         (lambda (&rest _)
    ;;           (when-let ((messages-buffer (get-buffer "*Messages*")))
    ;;             (with-current-buffer messages-buffer
    ;;               (evil-normalize-keymaps))))
    ;;         nil nil t)
    )
#+end_src

** Better Defaults
#+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p) ; accept y/n instead of yes/no in prompts
#+end_src

** Move Where I Mean
#+begin_src emacs-lisp
  (use-package mwim
    :ensure t
    :bind (:map prog-mode-map
                ("C-a" . mwim-beginning-of-code-or-line)
                ("C-e" . mwim-end-of-code-or-line)))
#+end_src
** Amx
It provides several enhancement over the ordinary ~execute-extended-command~
#+begin_src emacs-lisp
    (use-package amx
      :ensure t
      :config
      (amx-mode 1))
#+end_src
** Personal Information
#+begin_src emacs-lisp
  (setq user-full-name "Hien Huynh-Minh"
        user-mail-address "blackcat22121996@gmail.com")
#+end_src
** Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :diminish avy-mode
    :config (setq avy-all-windows nil))
#+end_src
** Whitespace
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure nil
    :defer t
    :hook (before-save . whitespace-cleanup)
    )
#+end_src
** String inflection
underscore -> UPCASE -> CamelCase
#+begin_src emacs-lisp
  (use-package string-inflection
    :ensure t
    :bind (:map
           prog-mode-map
           ("C-M-j" . string-inflection-cycle)))
#+end_src
* Appearance
** Set Theme
Set gruvbox theme, if you want some themes try out doom-themes.
Use consult-theme to easily try out themes (*Epilepsy* Warning).
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; global settings (defaults)
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-material t)
    ;; (load-theme 'doom-moonlight t)
    ;; (load-theme 'doom-palenight t)
    ;; (load-theme 'doom-molokai t) (sublime theme)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custome neotree theme (all-the-icons must be installed)
    ;; (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 100)) ;; For all new frames henceforth
#+end_src

** Fonts
*** Setting fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        ;; :font "JetBrains Mono" ;; Set your favorite type of font or download JetBrains Mono
                        :height 120
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.

    ;;(add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
    (setq-default line-spacing 0.12)
#+end_src

*** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (use-package emacs
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
#+end_src

** Modeline
Replace the default modeline with a prettier more useful.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom
      (doom-modeline-height 25)     ;; Sets modeline height
      (doom-modeline-bar-width 5)   ;; Sets right bar width
      (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
      (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name
#+end_src

** Dashboard
An extensible emacs startup screen
#+begin_src emacs-lisp
    (use-package nerd-icons
      :ensure t
      :demand t)

    (use-package dashboard
      :ensure t
      :after nerd-icons
      :config
      (dashboard-setup-startup-hook)
      :init
      (setq
       dashboard-startup-banner (concat user-emacs-directory "assets/emacs_banner.png")
       dashboard-banner-logo-title nil ; The text below the logo
       dashboard-set-heading-icons t
       dashboard-set-file-icons t
       dashboard-icon-type 'nerd-icons
       dashboard-display-icons-p t
       dashboard-items '((projects . 5)
                         (recents . 5)
                         (agenda . 5)
                         (bookmarks . 5))
       dashboard-startupify-list '(dashboard-insert-banner
                                   dashboard-insert-newline
                                   dashboard-insert-banner-title
                                   dashboard-insert-newline
                                   dashboard-insert-navigator
                                   dashboard-insert-newline
                                   dashboard-insert-init-info
                                   dashboard-insert-items
                                   dashboard-insert-newline
                                   ;; dashboard-insert-footer
                                   )
       dashboard-footer-messages '("The one true editor, Emacs!"
                                   "Free as free speech, free as free Beer"
                                   "Happy coding!"
                                   "I use Emacs, which might be thought of as a thermonuclear word processor. --Neal Stephenson"
                                   "Welcome to the church of Emacs"
                                   "In the beginning was the lambda, and the lambda was with Emacs, and Emacs was the lambda."
                                   "While any text editor can save your files, only Emacs can save your soul")
       )
      )
#+end_src

** Nyan Mode
#+begin_src emacs-lisp
  (use-package nyan-mode
    :ensure t
    :defer 20
    :if (display-graphic-p)
    :config
    (nyan-mode +1))
#+end_src
* Development
** Projectile
Project interaction library for Emacs.
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode)
    :custom
    (projectile-run-use-comint-mode t) ;; Interactive run dialog when running projects inside emacs (like giving input)
    (projectile-switch-project-action #'projectile-dired) ;; Open dired when switching to a project
    (projectile-generic-command "fd . -0 --type f --color=never")
    (projectile-project-search-path '("~/projects/"))) ;; . 1 means only search the first subdirectory level for projects
    ;; Use Bookmarks for smaller, not standard projects
#+end_src

** Eglot
Language Server Protocol Support for Emacs. The built-in is now Eglot (with emacs 29).

Eglot is fast and minimal, but requires manual setup for LSP servers (downloading).
For more [[https://www.gnu.org/software/emacs/manual/html_mono/eglot.html][information how to use.]] One alternative to Eglot is Lsp-mode, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] page for more information.

Eglot is easy to set up, but the only difficult part is downloading and setting up the lsp servers.
After that just add a hook with eglot-ensure to automatically start eglot for a given file type. And you are done.

As an example to use C, C++ you need to install clangd(or ccls) and uncomment the following lines. Now the language server will start automatically when opening any c,c++ file.

A harder example is Lua. Download the lua-language-server from their git repository, make the lua-language-server file executable at lua-language-server/bin.
Uncomment the following lines and change the path to the language server executable. Now the language server will work.
Or add the lua-language-server executable to your path.

If you can use a package manager just install the lsp server and add a hook.
Use visual block to uncomment easily in Org documents (C-v).
#+begin_src emacs-lisp
    (use-package eglot
      :ensure nil ;; Don't install eglot because it's now built-in
      :init
      (setq eglot-stay-out-of '(flymake))
      :hook (prog-mode . eglot-ensure)
      :custom
      ;; Good default
      (eglot-events-buffer-size 0) ;; No event buffers (Lsp server logs)
      (eglot-autoshutdown t);; Shutdown unused servers.
      (eglot-report-progress nil) ;; Disable lsp server logs (Don't show lsp messages at the bottom, java)
      ;; Manual lsp servers
      ;; :config
      ;; (add-to-list 'eglot-server-programs
      ;;             `((ruby-mode ruby-ts-mode) "ruby-lsp")) ;; Adds our lua lsp server to eglot's server list
      )
#+end_src

** Yasnippet
A template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it write out the full keyword (or use autocompletion) and press Tab.
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))
#+end_src

** Language modes
It's not required for every language like C,C++,C#,Java,Javascript etc. to install language mode packages,
but for more specific languages it is necessary for syntax highlighting.
If you want to use TreeSitter, check out this [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][website]] or try out [[https://github.com/renzmann/treesit-auto][Treesit-auto]].
Currently it's tedious to use Treesitter, because emacs has not yet fully migrated to it.
*** Treesitter auto
#+begin_src emacs-lisp :tangle no
(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src
*** Treesit
#+begin_src emacs-lisp
          (use-package tree-sitter
            :ensure t
            :hook ((prog-mode . tree-sitter-mode)
                   (prog-mode . tree-sitter-hl-mode))
            :config
            (require 'tree-sitter-langs))
#+end_src
*** Combobulate
#+begin_src emacs-lisp
  (use-package combobulate
    :custom
    ;; You can customize Combobulate's key prefix here.
    ;; Note that you may have to restart Emacs for this to take effect!
    (combobulate-key-prefix "C-c o")
    :hook ((prog-mode . combobulate-mode))
    ;; Amend this to the directory where you keep Combobulate's source
    ;; code.
    :load-path ("~/.emacs.d/assets/combobulate/"))
#+end_src
*** Lua mode
Example, how to setup a language mode (if you don't want it, feel free to delete it).
Use SPC-tab to uncomment the lines.
# #+begin_src emacs-lisp
#     (use-package lua-mode
#       :mode "\\.lua\\'") ;; Only start in a lua file
# #+end_src
*** Ruby mode
Setup ruby mode
#+begin_src emacs-lisp
    (use-package ruby-ts-mode
      :mode "\\.rb\\'"
      :mode "Rakefile\\'"
      :mode "Gemfile\\'"
      :bind (:map ruby-ts-mode-map
                  ("C-c r b" . 'treesit-beginning-of-defun)
                  ("C-c r e" . 'treesit-end-of-defun))
      :custom
      (ruby-indent-level 2)
      (ruby-indent-tabs-mode nil))

#+end_src
**** Inf-ruby
#+begin_src emacs-lisp
(use-package inf-ruby)
#+end_src
*** Eldoc
Eldoc is Emacs's documentation library.
#+begin_src emacs-lisp
    (use-package eldoc
      :init
      (global-eldoc-mode))
#+end_src
*** Linting and Error-checking
**** Flymake
Emacs has built-in on-the-fly syntax checker called Flymake.
#+begin_src emacs-lisp
    (use-package flymake
      :hook (prog-mode . flymake-mode))
#+end_src
*** Company
#+begin_src emacs-lisp
(use-package company)
#+end_src
*** Markdown
#+begin_src emacs-lisp
    (use-package markdown-mode
      :ensure t
      :magic "\\.md\\'")
#+end_src
*** React
Configuring Emacs for React, Es6, and flow.
**** Setup web-mode
#+begin_src emacs-lisp
              (use-package web-mode
                :config
                (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))
                      web-mode-markup-indent-offset 2
                      web-mode-css-indent-offset 2
                      web-mode-enable-css-colorization t
                      web-mode-enable-auto-pairing t
                      web-mode-enable-current-element-highlight t))
              (add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
#+end_src
**** Linter setup
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
  (require 'flycheck)
#+end_src
Disable the default jslint:
#+begin_src emacs-lisp
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint json-jsonlist)))
#+end_src

Use a global ~eslint~
Enable eslint checker when web-mode is activated:
#+begin_src emacs-lisp
;; Enable eslint checker for web-mode
(flycheck-add-mode 'javascript-eslint 'web-mode)
;; Enable flycheck globally
(add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src
***** Use a local eslint from node_modules
To use ~eslint~ and a config from a project's local node_modules, use the following:
#+begin_src emacs-lisp :tangle no
    (use-package add-node-modules-path
      :hook (flycheck-mode . add-node-modules-path))
#+end_src
**** Emmet Mode
#+begin_src emacs-lisp
(use-package emmet-mode)
#+end_src

*** Formatting buffers with prettier
#+begin_src emacs-lisp
  (use-package apheleia
    :ensure apheleia
    :diminish ""
    :defines
    apheleia-formatters
    apheleia-mode-alist
    :functions
    apheleia-global-mode
    :hook ((typescript-ts-mode .  apheleia-mode)
           (javascript-mode . apheleia-mode)
           (typescript-mode . apheleia-mode))
    :config
    (setf (alist-get 'prettier-json apheleia-formatters)
          '("prettier" "--stdin-filepath" filepath))
    ;; (apheleia-global-mode +1)
    )
#+end_src

*** Golang
#+begin_src emacs-lisp
        (use-package go-mode
          :ensure t
          :hook((go-mode . eglot-ensure)))
#+end_src

**** Go doc
#+begin_src emacs-lisp
(use-package go-eldoc
:ensure t
:hook (go-mode . go-eldoc-setup))

#+end_src
**** Install eglot format buffer as a save hook.
#+begin_src emacs-lisp
  (defun eglot-format-buffer-before-save ()
    (add-hook 'before-save-hook #'eglot-format-buffer -10 t))

  (defun eglot-organizing-import-before-save ()
    (add-hook 'before-save-hook
              (lambda ()
                (call-interactively 'eglot-code-action-organize-imports))
              nil t))
  (add-hook 'go-mode-hook #'eglot-format-buffer-before-save)
  (add-hook 'go-mode-hook #'eglot-organizing-import-before-save)
#+end_src
**** Configuring gopls via Eglot
#+begin_src emacs-lisp
  (setq-default eglot-workspace-configuration
                '((:gopls .
                          ((staticcheck . t)
                           (matcher . "CaseSensitive")))))
#+end_src
**** Go lint
#+begin_src bash
  go get -u github.com/golang/lint/golint
#+end_src

#+begin_src emacs-lisp
  (use-package golint
    :ensure t)
#+end_src
**** Go doctor
#+begin_src emacs-lisp
  (use-package godoctor
    :ensure t)
#+end_src
** Terminal
*** Eat
Eat(Emulate A Terminal) is a terminal emulator within Emacs.
It's more portable and less overhead for users over like vterm or eshell.
We setup eat with eshell, if you want to use bash, zsh etc., check out their git [[https://codeberg.org/akib/emacs-eat][repository]] how to do it.
#+begin_src emacs-lisp
    (use-package eat
      :hook ('eshell-load-hook #'eat-eshell-mode))
#+end_src
** Deadgrep
#+begin_src emacs-lisp

#+end_src
** AI
*** Gptel
#+begin_src emacs-lisp
      (defun me/read-openai-key ()
        (with-temp-buffer
          (insert-file-contents "~/.emacs.d/key.txt")
          (string-trim (buffer-string))))

      (use-package gptel
        :config
        (setq gptel-playback t)
        (setq gptel-api-key #'me/read-openai-key)
        (setq gptel-default-mode 'org-mode)
        (setq gptel-model "gpt-4o-mini")
        :hook
        ((gptel-post-stream . gptel-auto-scroll) ;; window scroll automatically
               )
        )
#+end_src
*** Elysium
#+begin_src emacs-lisp
    (use-package elysium
      :custom
      (elysium-window-size 0.33) ; The elysium buffer will be 1/3 your screen
      (elysium-window-style 'vertical)) ; Can be customized to horizontal
#+end_src
*** Custome function call gptel
#+begin_src emacs-lisp
(defun ad/ai-from-anywhere ()
(interactive)
(let* ((screen-width (display-pixel-width))
       (screen-height (display-pixel-height))
       (frame-width (/ screen-width 3))
       (frame-height screen-height)
       (frame-left (- screen-width frame-width))
       (frame-top 0)
       (chat-frame (make-frame `((window-system . ns)  ;;change this if you are not on macOS. For example you can use "x" instead of "ns" for x systems. Refer to make-frame documentation for more details
                            (top . ,frame-top)
                            (left . ,frame-left)
                            (width . (text-pixels . ,frame-width))
                            (heigth . (text-pixels . ,frame-height))
                            (minibuffer . t)
                            ))))
  (select-frame chat-frame)
  )
  (add-hook 'gptel-post-response-hook (lambda () (goto-char (point-max))))
  (gptel "My:AI Chat" gptel-api-key nil)
  (switch-to-buffer "My:AI Chat")
  (delete-other-windows)
)

#+end_src
** Indentation guides
It is very useful to see the indentation guides in programming modes.
#+begin_src emacs-lisp

#+end_src
** Dumbjump
#+begin_src emacs-lisp
    (use-package dumb-jump
      :ensure t
      :init
      (setq dumb-jump-selector 'ivy)
      :bind (("M-g o" . dumb-jump-go-other-window)
             ("M-g j" . dumb-jump-go)
             ("M-g i" . dumb-jump-go-prompt)
             ("M-g x" . dumb-jump-go-prefer-external)
             ("M-g z" . dumb-jump-go-prefer-external-other-window))
      :config
      (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
* Multi File Example
** Adding the lisp directory to load-path
Adds the lisp directory to emacs's load path to search for elisp files.
This is necessary, because emacs does not search the entire user-emacs-directory.
The directory name can be anything, just add it to the load-path.
#+begin_src emacs-lisp
    ;; (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Sourcing the files
To use the elisp files we need to load it.
Notes:
- Don't forget the file and the provide name needs to be the same.
- When naming elisp files, functions, it is recommended to use a group name (e.g init-, start- or any custom name), so it does not get mixed up with other names, functions.
#+begin_src emacs-lisp
    ;; (require 'start-multiFileExample)
#+end_src

** Using the file
And now we can use everything from that file.
#+begin_src emacs-lisp
    ;; (start/hello)
#+end_src

* Other Packages
All the package setups that don't need much tweaking.
** Nerd Icons
For icons and more helpful UI.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts.

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Git
*** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :commands magit-status)
#+end_src
*** Pretty Magit
**** Adding leaders
We cannot use font-locks so we compose the symbols and add the face text properties ourselve.
#+begin_src emacs-lisp
    (defmacro pretty-magit (WORD ICON PROPS &optional NO-PROMPT?)
      "Replace sanitized WORD with ICON, PROPS and by default add to prompt."
      `(prog1
           (add-to-list 'pretty-magit-alist
                        (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? "" ":"))))
                              ,ICON ',PROPS))
         (unless ,NO-PROMPT?
           (add-to-list 'pretty-magit-prompt (concat ,WORD ": ")))))
  (setq pretty-magit-alist nil)
  (setq pretty-magit-prompt nil)
  (pretty-magit "Feature" ? (:foreground "slate gray" :height 1.2))
  (pretty-magit "Add"     ? (:foreground "#375E97" :height 1.2))
  (pretty-magit "Fix"     ? (:foreground "#FB6542" :height 1.2))
  (pretty-magit "Clean"   ? (:foreground "#FFBB00" :height 1.2))
  (pretty-magit "Docs"    ? (:foreground "#3F681C" :height 1.2))
  ;; (pretty-magit "master"  ? (:box t :height 1.2) t)
  ;; (pretty-magit "origin"  ? (:box t :height 1.2) t)

(defun add-magit-faces ()
  "Add face properties and compose symbols for buffer from pretty-magit."
  (interactive)
  (with-silent-modifications
    (--each pretty-magit-alist
      (-let (((rgx icon props) it))
        (save-excursion
          (goto-char (point-min))
          (while (search-forward-regexp rgx nil t)
            (compose-region
             (match-beginning 1) (match-end 1) icon)
            (when props
              (add-face-text-property
               (match-beginning 1) (match-end 1) props))))))))

(advice-add 'magit-status :after 'add-magit-faces)
(advice-add 'magit-refresh-buffer :after 'add-magit-faces)
#+end_src
*** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
             (magit-pre-refresh  . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :init (global-diff-hl-mode))
#+end_src

*** Magit Todos
First, setup ~hl-todo~.
#+begin_src emacs-lisp :tangle no
    (use-package hl-todo
    :defer t
    :hook ((org-mode . hl-todo-mode)
           (prog-mode . hl-todo-mode))
    :config (
             (setq hl-todo-highlight-punctuation ":"
                   hl-todo-keyword-faces
                   `(("TODO" warning bold)
                     ("FIXME" error bold)
                     ("NOTE" success bold)
                     ))))
#+end_src
This package displays keyword entries from source code comments and Org files in the Magit status buffer.
#+begin_src emacs-lisp
    (use-package magit-todos
      :after (magit)
      :config (magit-todos-mode 1))
#+end_src

*** Smerge mode
#+begin_src emacs-lisp
    (use-package smerge-mode
      :ensure nil
      :hook (prog-mode . smerge-mode))
#+end_src
** Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
For more configuration options check out their [[https://github.com/minad/corfu][git repository]].
Notes:
- To enter Orderless field separator, use M-SPC.
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      (corfu-auto-prefix 2)          ;; Minimum length of prefix for auto completion.
      (corfu-popupinfo-mode t)       ;; Enable popup information
      (corfu-popupinfo-delay 0.5)    ;; Lower popupinfo delay to 0.5 seconds from 2 seconds
      (corfu-separator ?\s)          ;; Orderless field separator, Use M-SPC to enter separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin
      (completion-ignore-case t)
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)
      (corfu-preview-current nil) ;; Don't insert completion without confirmation
      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
Provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI.
Notes:
- The functions that are added later will be the first in the completion list.
- Take care when adding Capfs (Completion-at-point-functions) to the list since each of the Capfs adds a small runtime cost.
Read the [[https://github.com/minad/cape#configuration][configuration section]] in Cape's readme for more information.
#+begin_src emacs-lisp
    (use-package cape
      :after corfu
      :init
      ;; Add to the global default value of `completion-at-point-functions' which is
      ;; used by `completion-at-point'.  The order of the functions matters, the
      ;; first function returning a result wins.  Note that the list of buffer-local
      ;; completion functions takes precedence over the global list.
      ;; The functions that are added later will be the first in the list

      (add-to-list 'completion-at-point-functions #'cape-dabbrev) ;; Complete word from current buffers
      (add-to-list 'completion-at-point-functions #'cape-dict) ;; Dictionary completion
      (add-to-list 'completion-at-point-functions #'cape-file) ;; Path completion
      (add-to-list 'completion-at-point-functions #'cape-elisp-block) ;; Complete elisp in Org or Markdown mode
      (add-to-list 'completion-at-point-functions #'cape-keyword) ;; Keyword/Snipet completion

      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev) ;; Complete abbreviation
      ;;(add-to-list 'completion-at-point-functions #'cape-history) ;; Complete from Eshell, Comint or minibuffer history
      ;;(add-to-list 'completion-at-point-functions #'cape-line) ;; Complete entire line from current buffer
      ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol) ;; Complete Elisp symbol
      ;;(add-to-list 'completion-at-point-functions #'cape-tex) ;; Complete Unicode char from TeX command, e.g. \hbar
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml) ;; Complete Unicode char from SGML entity, e.g., &alpha
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345) ;; Complete Unicode char using RFC 1345 mnemonics
      )
#+end_src

** Diredfl
#+begin_src emacs-lisp
  (use-package diredfl
    :ensure t
    :config
    (setq
     diredfl-ignore-compressed-flag nil
     diredfl-number     '(:foreground "#54A248")
     diredfl-file-name  '(:foreground "White")
     diredfl-dir-name   '(:foreground "#3DAEE9")
     diredfl-symlink    '(:foreground "#16A085" :background "#3A3B32")
     diredfl-date-time  '(:foreground "#1D95EC")
     diredfl-dir-priv   '(:foreground "#3DAEE9")
     diredfl-read-priv  '(:foreground "#FDBC4B")
     diredfl-write-priv '(:foreground "#B0362B")
     diredfl-exec-priv  '(:foreground "#55A649")
     diredfl-link-priv  '(:foreground "#16A085")
     diredfl-compressed-file-suffix  'diredfl-file-suffix
     diredfl-compressed-file-name  '(:foreground "#C0392B")
     )
    :hook (dired-mode . diredfl-mode))
#+end_src
** Orderless
Completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
Recomended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

We use this packages, because they use emacs native functions. Unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more inforomation.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
  (use-package consult
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))

    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    ;; (consult-customize
    ;; consult-theme :preview-key '(:debounce 0.2 any)
    ;; consult-ripgrep consult-git-grep consult-grep
    ;; consult-bookmark consult-recent-file consult-xref
    ;; consult--source-bookmark consult--source-file-register
    ;; consult--source-recent-file consult--source-project-recent-file
    ;; :preview-key "M-."
    ;; :preview-key '(:debounce 0.4 any))

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
             ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
             ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
             ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
             ;;;; 4. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
             ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    :bind (
           ;; ("C-c M-x" . consult-mode-command)
           ;; C-x bindings (ctrl-x-map)
           ("C-x M-:" . consult-complex-command)
           ("C-x b" . consult-buffer) ;; orig. switch-to-buffer
           ("C-x r b" . consult-bookmark) ;; orig. bookmark-jump
           ("M-y" . consult-yank-pop) ;; orig. yank-pop
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g o" . consult-outline) ;; Alternativa: consult-org-heading
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-g f" . consult-flymake)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s i" . consult-info)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history))
    )
#+end_src

** Embark-consult
#+begin_src emacs-lisp
(use-package embark-consult
:ensure t
:hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Swiper
#+begin_src emacs-lisp
      (use-package swiper
        :ensure t
        :bind
        (:map global-map
              ("C-s" . swiper-isearch)
              ("C-S-s" . swiper-thing-at-point)))
#+end_src
** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which-Key
Which-key is a helper utility for keychords (which key to press).
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish
      :custom
      (which-key-side-window-location 'bottom)
      (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
      (which-key-sort-uppercase-first nil)
      (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
      (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
      (which-key-idle-delay 0.8)       ;; Set the time delay (in seconds) for the which-key popup to appear
      (which-key-max-description-length 25)
      (which-key-allow-imprecise-window-fit nil)) ;; Fixes which-key window slipping out in Emacs Daemon
#+end_src

** Ace Window
#+begin_src emacs-lisp
    (use-package ace-window
      :ensure t
      :config
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      :bind ("C-x o" . ace-window))
#+end_src
** Drag lines and region around
#+begin_src emacs-lisp
    (use-package drag-stuff
      :ensure t
      :bind
      ( :map global-map
        ("M-<up>" . drag-stuff-up)
        ("M-p" . drag-stuff-up)
        ("M-<down>" . drag-stuff-down)
        ("M-n" . drag-stuff-down)
        ))
#+end_src
** Wc Mode
This mode help us get some statistics from the buffer. This of course can be achieved with ~count-words~ and ~count-word-region~
#+begin_src emacs-lisp
    (use-package wc-mode
      :ensure t
      :defer t)
#+end_src
** Rotate
Emacs looks like a tilling window manager, but why not use it like a dynamic window manager.
#+begin_src emacs-lisp
    (use-package rotate
:ensure t
:bind
(:map global-map
("C-x C-l" . 'rotate-layout))
)
#+end_src
** PDF Tools
#+begin_src emacs-lisp
(use-package pdf-tools
:ensure t
:defer t
:config (pdf-tools-install))
#+end_src

** Expand Region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :defer t
    :bind (("C-=" . er/expand-region)))
#+end_src

** Neotree
#+begin_src emacs-lisp
(use-package neotree
  :config
  ;; modified version of https://github.com/hemmvm/dotemacs/blob/master/site-lisp/util--neotree.el
  (defun neotree-project-tree-open ()
    (interactive)
    (let ((project-dir (ignore-errors (projectile-project-root)))
          (file-name (buffer-file-name)))
      (if project-dir
          (progn
            (neotree-dir project-dir)
            (neotree-find file-name))
        (neotree-find)))
    (neo-global--select-window))

  (defun neotree-project-tree-toggle ()
    (interactive)
    (if (neo-global--window-exists-p)
        (neotree-hide)
      (neotree-project-tree-open)))

  (global-set-key [f8] 'neotree-project-tree-toggle)

  (setq neo-theme 'arrow)
  (setq neo-window-width 35)

  ;; https://github.com/jaypei/emacs-neotree/issues/77 + https://github.com/hemmvm/dotemacs/blob/master/site-lisp/util--neotree.el
  (defun custom-neotree-enter-hide ()
    (interactive)
    (neotree-enter)
    (let ((current (neo-buffer--get-filename-current-line)))
      (if (not (and current (file-accessible-directory-p current)))
          (neotree-hide)))
    )

  (defun custom-neotree-peek ()
    (interactive)
    (let ((neo-window (neo-global--get-window)))
      (neotree-enter)
      (select-window neo-window))
    )

  (add-hook
   'neotree-mode-hook
   (lambda ()
     (define-key neotree-mode-map (kbd "RET") 'custom-neotree-enter-hide)))

  (add-hook
   'neotree-mode-hook
   (lambda ()
     (define-key neotree-mode-map (kbd "TAB") 'custom-neotree-peek))))
#+end_src

** Multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src
* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
* Org Mode
Org mode is one of the things that emacs is loved for.
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :hook
    ((org-mode . org-indent-mode)
    (org-babel-after-execute . org-redisplay-inline-images))
    )
#+end_src
** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src
** Org Superstar
Prettify headings and plain lists in Org mode. Modern version of org-bullets.
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src

** MySql to org mode
#+begin_src emacs-lisp
  (use-package mysql-to-org
    :ensure t
    :after org
    :config
    (setq mysql-to-org-mysql-user "hienhm"))
#+end_src
** Org Babels

#+begin_src emacs-lisp
    (setq org-babel-results-keyword "results")
    (setq org-src-fontify-natively t)
#+end_src
*** Load language
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sql . t)
     ;;(http . t)
     (restclient . t)
     (go . t)
     (rust . t)))
#+end_src

#+results:

*** Golang
#+begin_src emacs-lisp
    (use-package ob-go :after org)
#+end_src

*** Rust
#+begin_src emacs-lisp
(use-package ob-rust :after org)
#+end_src

*** Html
#+begin_src emacs-lisp :tangle no
  (use-package ob-http
    :after org)
#+end_src

*** Restclient
#+begin_src emacs-lisp
(use-package ob-restclient
  :ensure t
  :after org
  :config
  (add-to-list 'org-babel-load-languages '(restclient . t)))
#+end_src

*** Verb
#+begin_src emacs-lisp
  (use-package verb
    :ensure t
    :after org
    :config
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
    (add-to-list 'org-babel-load-languages '(verb . t)))
#+end_src
** Org Exporter
#+begin_src emacs-lisp
        (use-package ox-gfm
          :defer t
          :ensure t
          :config (ox-gfm :type git :host github :repo "larstvei/ox-gfm"))
#+end_src
** Org Drawing
*** Plantuml
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :ensure ;TODO:
    :config
    (setq org-plantuml-executable-path "/usr/local/share/plantuml/plantuml.jar"))

  (use-package org
    :init
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((plantuml . t)))
    :custom
    ;; PlantUML was too old on Debian Bookworm, so a recent copy is
    ;; installed in /usr/local/share
    (org-plantuml-jar-path "/usr/local/share/plantuml/plantuml.jar")
    ;; Do not ask before evaluating a code block
    (org-confirm-babel-evaluate nil)
    ;; Fix for including SVGs
    (org-latex-pdf-process
     '("%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
   "bibtex %b"
   "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
   "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    )
#+end_src
** LaTeX previews with Org
#+begin_src emacs-lisp
    (use-package org-fragtog
      :ensure t
      :after org
      :hook
      (org-mode . org-fragtog-mode)
      :custom
      (org-startup-with-latex-preview t)
      (org-format-latex-options
       (plist-put org-format-latex-options :scale 2)
       (plist-put org-format-latex-options :foreground 'auto)
       (plist-put org-format-latex-options :background 'auto))
      )
#+end_src

** Image handling in the Org file
One consistent headache with Org image handling is that it does not resize images correclty, by using this custom function from SO, the aim is to at least set them to Window size.
#+begin_src emacs-lisp
    (defun my/org-image-resize (frame)
      (when (derived-mode-p 'org-mode)
        (if (< (window-total-width) 80)
            (setq org-image-actual-width (window-pixel-width))
          (setq org-image-actual-width (* 80 (window-font-width))))
      (org-redisplay-inline-images)))
    (add-hook 'window-size-change-functions 'my/org-image-resize)

    (defun my/display-inline-images ()
      (condition-case nil
          (org-display-inline-images)
        (error nil)))
    (add-hook 'org-babel-after-execute-hook 'my/display-inline-images 'append)
#+end_src

** Org Publish
#+begin_src emacs-lisp
    (require 'ox-publish)
#+end_src

** Org Presentation
*** Dslide
#+begin_src emacs-lisp
  (use-package dslide
    :ensure t)

  (keymap-set org-mode-map "<f5>" #'dslide-deck-start)
#+end_src
*** Master of Ceremonies
#+begin_src emacs-lisp :tangle no
  (use-package moc
    :ensure t)
#+end_src
*** org-present
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :after org
    :config
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t))

  (use-package org-present
    :ensure t
    :after org)
  (defun my/org-present-prepare-slide (buffer-name heading)
    ;; Show only top-level headlines
    (org-overview)
    ;; Unfold the current entry
    (org-fold-show-entry)
    ;; Show only direct subheadings of the slide but don't expand them
    (org-fold-show-children))

  (defun my/org-present-start ()
    ;; Tweak font sizes
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                       (header-line (:height 4.0) variable-pitch)
                                       (org-document-title (:height 1.75) org-document-title)
                                       (org-code (:height 1.55) org-code)
                                       (org-verbatim (:height 1.55) org-verbatim)
                                       (org-block (:height 1.25) org-block)
                                       (org-block-begin-line (:height 0.7) org-block)))

    ;; Set a blank header line string to create blank space at the top
    (setq header-line-format " ")

    ;; Display inline images automatically
    (org-display-inline-images)

    ;; Center the presentation and wrap lines
    (visual-fill-column-mode 1)
    (visual-line-mode 1))

  (defun my/org-present-end ()
    ;; Reset font customizations
    (setq-local face-remapping-alist '((default variable-pitch default)))

    ;; Clear the header line string so that it isn't displayed
    (setq header-line-format nil)

    ;; Stop displaying inline images
    (org-remove-inline-images)

    ;; Stop centering the document
    (visual-fill-column-mode 0)
    (visual-line-mode 0))

  ;; Turn on variable pitch fonts in Org Mode buffers
  ;; (add-hook 'org-mode-hook 'variable-pitch-mode)

  ;; Register hooks with org-present
  (add-hook 'org-present-mode-hook 'my/org-present-start)
  (add-hook 'org-present-mode-quit-hook 'my/org-present-end)
  (add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)
#+end_src
** Org Preview HTML
#+begin_src emacs-lisp
    (use-package org-preview-html
      :ensure t
      :after org)
#+end_src

** Custom functions

*** PDF To Org
#+begin_src emacs-lisp
(defun pdf-to-org (pdf-file org-file)
  "Convert PDF-FILE to ORG-FILE by extracting the text and converting it into org mode."
  (interactive "fSelect PDF file: \nFSave Org file as: ")
  (let ((temp-txt-file (make-temp-file "pdf-to-text-" nil ".txt")))
    ;; Extract text from the PDF using pdftotext command
    (shell-command (format "pdftotext %s %s" pdf-file temp-txt-file))

    ;; Read the extracted text
    (with-temp-buffer
      (insert-file-contents temp-txt-file)
      ;; Optionally, add Org headers or other formatting
      (goto-char (point-min))
      (insert "#+TITLE: Extracted PDF Content\n\n")

      ;; Write to the Org file
      (write-region (point-min) (point-max) org-file))
    (message "PDF content has been written to %s" org-file)))

#+end_src
** Inline Images
Show inline images by default
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src
** Restclient
#+begin_src emacs-lisp
  (use-package restclient
   :ensure t
   :mode ("\\.http\\'" . restclient-mode))
#+end_src
* Weather Tools
#+begin_src emacs-lisp

#+end_src
* Music
#+begin_src emacs-lisp
  (use-package smudge
    :bind-keymap ("C-c ." . smudge-command-map)
    :config
    (setq smudge-oauth2-client-secret "2514e465cfe94158b0e68861d3c22428"
          smudge-oauth2-client-id "c190941e16e04f588f5485f6d0791d77")
    ;; (setq smudge-transport 'connect) ;; Premium only
    )
#+end_src
